@page "/azure-storage"
@inject BlobService BlobService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Azure Storage Test</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Azure Storage Test</MudText>

<MudText Typo="Typo.h5" GutterBottom="true">Blobs</MudText>

<MudButton Class="mb-2" Disabled="@IsProcessing("BlobCreation")" FullWidth="true" OnClick="@(() =>
    ExecuteAsync(BlobService.CreateContainerAsync,
    "BlobCreation",
    "Contenedor creado correctamente"))" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("BlobCreation"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Crear Azure Blob Container</MudText>
    }
</MudButton>

<MudButton Class="mb-2" Disabled="@IsProcessing("BlobDeletion")" FullWidth="true" OnClick="@(() =>
    ExecuteAsync(BlobService.DeleteContainerAsync,
    "BlobDeletion",
    "Contenedor eliminado correctamente"))" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("BlobDeletion"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Eliminar Azure Blob Container</MudText>
    }
</MudButton>

<MudButton Class="mb-2" Disabled="@IsProcessing("BlobUpload")" FullWidth="true" OnClick="@(() =>
    ExecuteAsync(BlobService.UploadBlogAsync,
    "BlobUpload",
    "Blob subido correctamente"))" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("BlobUpload"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Subir Blob</MudText>
    }
</MudButton>

<MudButton Class="mb-2" Disabled="@IsProcessing("BlobDownload")" FullWidth="true" OnClick="DownloadBlobAsync" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("BlobDownload"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Descargar Blob</MudText>
    }
</MudButton>

<MudDivider />

<MudText Class="mt-4" Typo="Typo.h5" GutterBottom="true">Queues</MudText>

<MudButton Class="mb-2" Disabled="@IsProcessing("QueueCreation")" FullWidth="true" OnClick="@(() =>
    ExecuteAsync(BlobService.CreateQueueAsync,
    "QueueCreation",
    "Cola creada correctamente"))" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("QueueCreation"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Crear Azure Queue</MudText>
    }
</MudButton>

<MudButton Class="mb-2" Disabled="@IsProcessing("QueueDeletion")" FullWidth="true" OnClick="@(() =>
    ExecuteAsync(BlobService.DeleteQueueAsync,
    "QueueDeletion",
    "Cola eliminada correctamente"))" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("QueueDeletion"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Eliminar Azure Queue</MudText>
    }
</MudButton>

<MudText Class="mt-2" Typo="Typo.body1">Enviar un mensaje a la cola:</MudText>

<MudTextField @bind-Value="queueMessage" Class="mb-2" Label="Mensaje de cola" Variant="Variant.Outlined"></MudTextField>

<MudButton Class="mb-2" Disabled="@IsProcessing("QueueMessage")" FullWidth="true" OnClick="@(() =>
    ExecuteAsync(() => BlobService.SendQueueMessageAsync(queueMessage),
    "QueueMessage",
    "Mensaje enviado correctamente"))" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("QueueMessage"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Enviar mensaje</MudText>
    }
</MudButton>

<MudButton Class="mb-2" Disabled="@IsProcessing("QueueGetMessages")" FullWidth="true" OnClick="GetQueueMessagesAsync" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("QueueGetMessages"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Leer mensajes</MudText>
    }
</MudButton>

<MudText Typo="Typo.body1">Listado de mensajes:</MudText>

<MudSimpleTable Striped="true" Style="overflow-x: auto;">
    <tbody>
        @foreach (var message in queueMessages)
        {
            <tr>
                <td>@message</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<MudText Class="mt-4" Typo="Typo.h5" GutterBottom="true">Tables</MudText>

<MudButton Class="mb-2" Disabled="@IsProcessing("TableCreation")" FullWidth="true" OnClick="@(() =>
    ExecuteAsync(BlobService.CreateTableAsync,
    "TableCreation",
    "Cola creada correctamente"))" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("TableCreation"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Crear Azure Table</MudText>
    }
</MudButton>

<MudButton Class="mb-2" Disabled="@IsProcessing("TableDeletion")" FullWidth="true" OnClick="@(() =>
    ExecuteAsync(BlobService.DeleteTableAsync,
    "TableDeletion",
    "Tabla eliminada correctamente"))" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("TableDeletion"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Eliminar Azure Table</MudText>
    }
</MudButton>

<MudText Class="mt-2" Typo="Typo.body1">Añadir registro en la tabla:</MudText>

<MudTextField @bind-Value="tableEntry" Label="Valor" Variant="Variant.Outlined"></MudTextField>

<MudButton Class="mb-2" Disabled="@IsProcessing("TableEntry")" FullWidth="true" OnClick="@(() =>
    ExecuteAsync(() => BlobService.AddTableEntryAsync(tableEntry),
    "TableEntry",
    "Entrada añadida correctamente"))" Variant="Variant.Filled" Color="Color.Primary">
    @if (IsProcessing("TableEntry"))
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Procesando</MudText>
    }
    else
    {
        <MudText>Añadir entrada</MudText>
    }
</MudButton>

@code {
    Dictionary<string, bool> processingStates = new();
    string queueMessage = string.Empty;
    IEnumerable<string> queueMessages = Enumerable.Empty<string>();
    string tableEntry = string.Empty;

    private async Task DownloadBlobAsync()
    {
        SetProcessingState("BlobDownload", true);

        try
        {
            var stream = await BlobService.DownloadBlobAsync();

            var fileName = $"test.txt";

            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var byteArray = memoryStream.ToArray();

            var base64 = Convert.ToBase64String(byteArray);
            var url = $"data:application/octet-stream;base64,{base64}";

            await JSRuntime.InvokeVoidAsync("downloadFileFromUrl", url, fileName);
        }
        catch (Exception exception)
        {
            Snackbar.Add($"Error: {exception.Message}", Severity.Error);
        }

        SetProcessingState("BlobDownload", false);
    }

    private async Task ExecuteAsync(Func<Task> blobAction, string actionKey, string successMessage)
    {
        SetProcessingState(actionKey, true);

        try
        {
            await blobAction();

            Snackbar.Add(successMessage, Severity.Info);
        }
        catch (Exception exception)
        {
            Snackbar.Add($"Error: {exception.Message}", Severity.Error);
        }

        SetProcessingState(actionKey, false);
    }

    private async Task GetQueueMessagesAsync()
    {
        SetProcessingState("QueueGetMessages", true);

        try
        {
            queueMessages = await BlobService.GetQueueMessagesAsync();
        }
        catch (Exception exception)
        {
            Snackbar.Add($"Error: {exception.Message}", Severity.Error);
        }

        SetProcessingState("QueueGetMessages", false);
    }

    private bool IsProcessing(string actionKey)
    {
        return processingStates.ContainsKey(actionKey) && processingStates[actionKey];
    }

    private void SetProcessingState(string actionKey, bool isProcessing)
    {
        processingStates[actionKey] = isProcessing;
        
        StateHasChanged();
    }
}
